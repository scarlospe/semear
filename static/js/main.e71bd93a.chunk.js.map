{"version":3,"sources":["utils/firebase.js","hocs/WithChat.js","components/Loading.js","hocs/WithList.js","hocs/WithAdmin.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","database","auth","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","WithChat","react_default","a","createElement","styled_components_browser_es","react_simple_chatbot_default","handleEnd","_ref","renderedSteps","steps","values","currentDate","Date","getTime","ref","concat","set","name","option","email","headerTitle","title","data","width","Loading","className","role","WithList","state","items","loading","_this2","this","once","then","snapshot","obj","val","arr","Object","keys","forEach","item","toConsumableArray","setState","map","index","key","renderLoading","renderTable","Component","WithAdmin","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isAuth","handleSubmit","bind","assertThisInitialized","handleLogout","onAuthStateChanged","user","_this3","signOut","event","preventDefault","_event$target","target","password","authUser","value","_this4","signInWithEmailAndPassword","operationType","onSubmit","autoComplete","type","id","placeholder","required","autoFocus","onClick","hocs_WithList","_this$state","renderContent","renderForm","Home","hocs_WithChat","Admin","hocs_WithAdmin","App","react_router_dom","basename","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e71bd93a.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport \"firebase/database\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_ID\n};\n\nfirebase.initializeApp(config);\n\nconst storage = firebase.storage();\nconst database = firebase.database();\nconst auth = firebase.auth();\n\nexport { storage, database, auth };","import React from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport {data, title} from '../data/data.json';\nimport {ThemeProvider} from 'styled-components';\nimport {database} from '../utils/firebase';\n\nconst theme = {\n  background: '#FFF',\n  fontFamily: 'Helvetica Neue',\n  headerBgColor: '#2E2D33',\n  headerFontColor: '#fff',\n  headerFontSize: '15px',\n  botBubbleColor: '#2E2D33',\n  botFontColor: '#fff',\n  userBubbleColor: '#fff',\n  userFontColor: '#4a4a4a',\n};\n\nconst WithChat = () => {\n\tconst handleEnd = ({renderedSteps, steps, values }) => {\n\t\tconst currentDate = new Date().getTime();\n\n\t\tdatabase.ref(`/users/${currentDate}`).set({\n\t\t\tname: values[0],\n\t\t\toption: values[1],\n\t\t\temail: values[2]\n\t\t});\n\t}\n\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<ChatBot\n\t\t\t\thandleEnd={handleEnd}\n\t\t\t\theaderTitle={title}\n\t\t\t\tsteps={data}\n\t\t\t\twidth=\"100%\"\n\t\t\t/>\n\t\t</ThemeProvider>\n\t);\n};\n\nexport default WithChat;","import React from 'react';\n\nexport default () => (\n\t<div className=\"d-flex justify-content-center\">\n\t\t<div className=\"spinner-border\" role=\"status\">\n\t\t\t<span className=\"sr-only\">Loading...</span>\n\t\t</div>\n\t</div>\n);","import React, {Component} from 'react';\nimport {database} from '../utils/firebase';\nimport Loading from '../components/Loading';\n\nclass WithList extends Component {\n\tstate = {\n\t\titems: [],\n\t\tloading: true\n\t}\n\n\tcomponentDidMount() {\n\t\tdatabase.ref('/users').once('value').then(snapshot => {\n\t\t\tconst obj = snapshot.val();\n\n\t\t\tif (!obj) return;\n\n\t\t\tlet arr = [];\n\n\t\t\tObject.keys(obj).forEach(item => {\n\t\t\t\tarr = [\n\t\t\t\t\t...arr,\n\t\t\t\t\tobj[item]\n\t\t\t\t];\n\t\t\t});\n\n\t\t\tthis.setState({items: arr, loading: false})\n\t\t});\n\t}\n\n\trenderTable() {\n\t\tconst {items} = this.state;\n\n\t\treturn (\n\t\t\t<table className=\"table\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Nome</th>\n\t\t\t\t\t\t<th>Email</th>\n\t\t\t\t\t\t<th>Opção</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{items.map(({name, email, option}, index) => (\n\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t<td>{name}</td>\n\t\t\t\t\t\t\t<td>{email}</td>\n\t\t\t\t\t\t\t<td>{option}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t);\n\t}\n\n\trenderLoading() {\n\t\treturn <Loading />;\n\t}\n\n\trender() {\n\t\tconst {loading} = this.state;\n\n\t\treturn !loading ? this.renderTable() : this.renderLoading();\n\t}\n}\n\nexport default WithList;","import React, {Component} from 'react';\nimport {auth} from '../utils/firebase';\nimport WithList from './WithList';\nimport Loading from '../components/Loading';\n\nclass WithAdmin extends Component {\n\tstate = {\n\t\tisAuth: false,\n\t\tloading: true\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.handleLogout = this.handleLogout.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tauth.onAuthStateChanged(user => {\n\t\t\tif (user) {\n\t\t\t\tthis.setState({isAuth: true});\n\t\t\t}\n\n\t\t\tthis.setState({loading: false});\n\t\t});\n\t}\n\n\thandleLogout() {\n\t\tauth.signOut().then(() => {\n\t\t\tthis.setState({isAuth: false});\n\t\t});\n\t}\n\n\thandleSubmit(event) {\n\t\tevent.preventDefault();\n\t\tconst {email, password} = event.target;\n\n\t\tthis.authUser(email.value, password.value);\n\t}\n\n\tauthUser(email, password) {\n\t\tauth.signInWithEmailAndPassword(email, password).then(({operationType, user}) => {\n\t\t\tif (user) {\n\t\t\t\tthis.setState({isAuth: true});\n\t\t\t}\n\n\t\t\tthis.setState({loading: false});\n\t\t});\n\t}\n\n\trenderForm() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-sm-9 col-md-7 col-lg-5 mx-auto\">\n\t\t\t\t\t\t<div className=\"card card-signin my-5\">\n\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t<h5 className=\"card-title text-center\">Semear <span className=\"badge badge-light\">CHATBOT</span></h5>\n\t\t\t\t\t\t\t\t<form className=\"form-signin\" onSubmit={this.handleSubmit}>\n\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<input autoComplete=\"email\" name=\"email\" type=\"email\" id=\"inputEmail\" className=\"form-control\" placeholder=\"Email address\" required autoFocus />\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t<input autoComplete=\"password\" name=\"password\" type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" required />\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<button className=\"btn btn-lg btn-primary btn-block text-uppercase\" type=\"submit\">Sign in</button>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderContent() {\n\t\treturn (\n\t\t\t<div className=\"container mt-5\">\n\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t<div className=\"d-flex justify-content-between align-center mb-3\">\n\t\t\t\t\t\t\t<h5 className=\"card-title m-0\">Semear Users</h5>\n\t\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.handleLogout}>Sign out</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<WithList />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderLoading() {\n\t\treturn (\n\t\t\t<div className=\"container mt-5\">\n\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t<Loading />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst {isAuth, loading} = this.state;\n\n\t\tif (loading) {\n\t\t\treturn this.renderLoading()\n\t\t}\n\n\t\treturn isAuth ? (\n\t\t\tthis.renderContent()\n\t\t) : (\n\t\t\tthis.renderForm()\n\t\t);\n\t}\n}\n\nexport default WithAdmin;","import React from 'react';\nimport WithChat from './hocs/WithChat';\nimport WithAdmin from './hocs/WithAdmin';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/admin\" component={Admin} />\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => <WithChat />;\n\nconst Admin = () => <WithAdmin />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}